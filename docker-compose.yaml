version: '3.9'

x-airflow-common: &airflow-common
  image: apache/airflow:2.9.2-python3.9
  restart: always
  environment:
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s

  airflow-init:
    <<: *airflow-common
    command: ["airflow", "db", "init"]

  airflow-webserver:
    <<: *airflow-common
    ports:
      - "8090:8080"
    command: ["airflow", "webserver"]

  airflow-scheduler:
    <<: *airflow-common
    command: ["airflow", "scheduler"]


  spark-master:
    image: bitnami/spark:3.5.1
    environment:
      SPARK_MODE: master
    ports:
      - "7077:7077"
      - "8082:8080"

  spark-worker:
    image: bitnami/spark:3.5.1
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
    depends_on:
      - spark-master

  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: milvus_etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_HEARTBEAT_INTERVAL=500
      - ETCD_ELECTION_TIMEOUT=2500
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: milvus_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: minio server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus:
    image: milvusdb/milvus:v2.3.9
    container_name: milvus_standalone
    command: ["milvus", "run", "standalone"]
    ports:
      - "19530:19530"
      - "9091:9091"
    volumes:
      - ./milvus_data:/var/lib/milvus/data # ./milvus_data 경로 유지
    depends_on:
      etcd:
        condition: service_started
      minio:
        condition: service_healthy
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000

volumes:
  postgres_data:
  # --- 아래 3개의 볼륨 정의를 추가하세요 ---
  etcd_data:
  minio_data:
  milvus_data:


  # clickhouse-server:
  #   image: clickhouse/clickhouse-server:24.3
  #   container_name: clickhouse_server
  #   ports:
  #     - "8123:8123"
  #     - "9000:9000"
  #   volumes:
  #     - clickhouse_data:/var/lib/clickhouse
  #   ulimits:
  #     nofile:
  #       soft: 262144
  #       hard: 262144

